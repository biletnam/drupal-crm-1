<?php

/**
 * @file
 * General interface elements, common for all UI submodules.
 */

/**
 * Implements hook_menu().
 */
function crm_ui_menu() {
  $items = array();

  $items['admin/crm'] = array(
    'title' => 'CRM',
    'description' => 'Customer Relationship Management',
    'page callback' => 'crm_index',
    'page arguments' => array(),
    'access arguments' => array('crm manage'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/crm/config'] = array(
    'title' => 'Config',
    'description' => 'Manage CRM configuration.',
    'page callback' => 'crm_index',
    'page arguments' => array(),
    'access arguments' => array('crm administer'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 99,
  );

  // Megarow callback.
  $items['admin/crm/%/%/%'] = array(
    'title' => 'Preview',
    'page callback' => 'crm_ui_entity_preview',
    'page arguments' => array(2, 3, 4),
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'crm_ui_entity_preview_access',
    'access arguments' => array('view', 2, 3),
  );

  return $items;
}

/**
 * Renders index based on current parent element.
 *
 * @return array
 *   Returns renderable array.
 */
function crm_index() {
  $build = array();
  $parent = menu_link_get_preferred(current_path());
  $parameters = array(
    'active_trail' => array($parent['plid']),
    'only_active_trail' => FALSE,
    'min_depth' => $parent['depth'] + 1,
    'max_depth' => $parent['depth'] + 1,
    'conditions' => array('plid' => $parent['mlid']),
  );

  $children = menu_build_tree($parent['menu_name'], $parameters);

  foreach ($children as $child) {
    $build[$child['link']['mlid']] = array(
      '#theme' => 'admin_block_content',
      '#content' => array($child['link']),
    );
  }

  return $build;
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 *
 * Tweaks the appearance of the VBO selector.
 */
function crm_ui_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if ($form_state['step'] == 'views_form_views_form' && strpos($vbo->view->name, 'crm_') !== FALSE) {
    $form['select']['#title'] = '';
    $form['select']['#collapsible'] = FALSE;
    $form['select']['submit']['#value'] = t('Apply');
    $form['select']['operation']['#options'][0] = t('Bulk operations');
    $form['select']['#weight'] = 99999;
    $form['select']['#attached']['css'][] = drupal_get_path('module', 'crm_ui') . '/assets/crm_ui.vbo.css';
  }
}

/**
 * Implements hook_theme().
 */
function crm_ui_theme($existing, $type, $theme, $path) {

  $themes['crm_ui_knob'] = array(
    'variables' => array(
      'label' => NULL,
      'value' => 0,
      'min' => 0,
      'max' => 0,
      'settings' => array(),
    ),
  );

  return $themes;
}

/**
 * @param $variables
 * @return string
 */
function theme_crm_ui_knob($variables) {

  libraries_load('jQuery-Knob');
  drupal_add_css(drupal_get_path('module', 'crm_ui') . '/assets/crm_ui.knob.css');
  drupal_add_js(drupal_get_path('module', 'crm_ui') . '/assets/crm_ui.knob.js');


  if (!isset($variables['settings']) || !is_array($variables['settings'])) {
    $variables['settings'] = array();
  }

  $variables['settings'] += array(
    'width' => 100,
    'height' => 100,
    'readOnly' => TRUE,
    'fgColor' => '#990000',
    'skin' => 'tron',
    'thickness' => '.5',
    'angleOffset' => -125,
    'angleArc' => 250,
  );

  $output = '<div class="crm-ui__knob-wrapper">';
  $output .= '<div class="crm-ui__knob-wrapper__label">' . $variables['label'] . '</div>';
  $output .= '<input type="text" value="' . $variables['value'] . '" data-min="' . $variables['min'] . '" data-max="' . $variables['max'] . '" ';
  foreach ($variables['settings'] as $key => $value) {
    $output .= "data-$key='$value' ";
  }
  $output .= 'class="crm-ui__knob-wrapper__knob">';
  $output .='</div>';
  drupal_add_js(array('crm_ui_knob' => $variables['settings']), 'setting');

  return $output;
}

/**
 * Implements hook_libraries_info().
 */
function crm_ui_libraries_info() {
  $libraries['jQuery-Knob'] = array(
    'name' => 'jQuery Knob',
    'vendor url' => 'https://github.com/aterrien/jQuery-Knob',
    'download url' => 'https://github.com/aterrien/jQuery-Knob/archive/master.zip',
    'version arguments' => array(
      'file' => 'package.json',
      // Best practice: Document the actual version strings for later reference.
      // 1.x: Version 1.0
      'pattern' => '/"version": "(\d+\.+\d+.+\d+)"/',
      'lines' => 3,
    ),
    'files' => array(
      'js' => array('dist/jquery.knob.min.js'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_form_alter().
 */
function crm_ui_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'crm_') !== FALSE) {
    if (!isset($form['#attached']['css'])) {
      $form['#attached']['css'] = array();
    }
    $form['#attached']['css'][] = drupal_get_path('module', 'crm_ui') . '/assets/crm_ui.form.css';
  }
}

/**
 * Displays the given entity using the default view mode, in a megarow.
 */
function crm_ui_entity_preview($entity_type, $entity_id, $display_id) {
  $entity = entity_load_single($entity_type, $entity_id);
  $title = entity_label($entity_type, $entity);
  $view = entity_view($entity_type, array($entity_id => $entity), 'default', NULL, FALSE);
  $view = $view[$entity_type][$entity_id];
  $output = drupal_render($view);

  $return = views_megarow_display($title, $output, $entity_id);
  if (!empty($view['#megarow_refresh_parent'])) {
    $return['#commands'][] = views_megarow_command_refresh_parent($entity_id, $display_id);
  }

  return $return;
}

/**
 * Megarow preview access.
 *
 * @param string $op
 * @param string $entity_type
 * @param integer $entity_id
 * @param object|null $account
 *
 * @return bool
 */
function crm_ui_entity_preview_access($op, $entity_type, $entity_id, $account = NULL) {
  $entity = entity_load_single($entity_type, $entity_id);
  if (!$entity) {
    return FALSE;
  }
  return entity_access($op, $entity_type, $entity, $account);
}
