<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function crm_campaign_ui_menu() {
  $items = array();

  $items['admin/crm/campaign/%crm_campaign/view'] = array(
    'title' => 'View',
    'page callback' => 'crm_campaign_view',
    'page arguments' => array(3, 'administrator', NULL, TRUE),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('view', 3),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -2,
  );

  $items['admin/crm/campaign/%crm_campaign/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'crm_campaign_ui_edit_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/crm_campaign_ui.form.inc',
    'weight' => -1,
  );

  $items['admin/crm/campaign/%crm_campaign/recipients'] = array(
    'title' => 'Manage recipients',
    'page callback' => 'crm_campaign_ui_manage_recipients',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/crm_campaign_ui.form.inc',
    'weight' => 50,
  );

  $items['admin/crm/campaign/%crm_campaign/clone'] = array(
    'title' => 'Clone',
    'page callback' => 'crm_campaign_ui_clone',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('create'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/crm_campaign_ui.form.inc',
    'weight' => 50,
  );

  $items['admin/crm/campaign/%crm_campaign/send'] = array(
    'title' => 'Send',
    'page callback' => 'crm_campaign_ui_send_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('send', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/crm_campaign_ui.form.inc',
    'weight' => 98,
  );

  $items['admin/crm/campaign/%crm_campaign/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'crm_campaign_ui_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('delete', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/crm_campaign_ui.form.inc',
    'weight' => 99,
  );

  $items['admin/crm/campaign/add'] = array(
    'title' => 'Add campaign',
    'page callback' => 'crm_campaign_ui_add_form_wrapper',
    'page arguments' => array(),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('create'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/crm_campaign_ui.form.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function crm_campaign_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/crm/campaign' && isset($data['actions']['output'][0]['#link']['localized_options'])) {
    $data['actions']['output'][0]['#link']['localized_options']['query'] = drupal_get_destination();
  }
}

/**
 * Implements hook_views_api().
 */
function crm_campaign_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_campaign_ui') . '/includes/views',
  );
}

/**
 * Implements hook_action_info().
 */
function crm_campaign_ui_action_info() {
  $info['crm_campaign_ui_add_to_campaign_action'] = array(
    'type' => 'crm_channel',
    'label' => t('Add to Campaign'),
    'configurable' => FALSE,
    'permissions' => array('crm campaign update'),
    'aggregate' => TRUE,
    // Add fake behaviour to prevent entity save.
    'behavior' => array('null'),
  );
  $info['crm_campaign_ui_remove_from_campaign_action'] = array(
    'type' => 'crm_channel',
    'label' => t('Remove from Campaign'),
    'configurable' => FALSE,
    'permissions' => array('crm campaign update'),
    'aggregate' => TRUE,
    // Add fake behaviour to prevent entity save.
    'behavior' => array('null'),
  );
  return $info;
}

//function crm_campaign_ui

/**
 * @return array
 */
function crm_campaign_ui_crm_campaign_method_info() {
  $methods['crm_campaign_vbo'] = array(
    'name' => t('Manage recipients'),
    'auto' => FALSE,
  );
  return $methods;
}

/**
 * Action callback: crm_campaign_add_to_campaign_action.
 */
function crm_campaign_ui_add_to_campaign_action(&$entities, &$context) {
  try {
    $campaign = entity_load_single('crm_campaign', $context['view_info']['arguments'][0]);
    crm_campaign_add_channel_to_campaign($campaign, $entities);
    $campaign->revision = TRUE;
    $campaign->log = 'Campaign channels list has been updated';
    entity_save('crm_campaign', $campaign);
  }
  catch (Exception $e) {
    watchdog_exception('crm_campaign', $e);
    drupal_set_message('Unable to add channels to campaign.', 'error');
    return FALSE;
  }
}

/**
 * Action callback: crm_campaign_ui_remove_from_campaign_action.
 */
function crm_campaign_ui_remove_from_campaign_action(&$entities, &$context) {
  try {
    $campaign = entity_load_single('crm_campaign', $context['view_info']['arguments'][0]);
    crm_campaign_remove_channel_from_campaign($campaign, $entities);
    $campaign->log = 'Campaign channels list has been updated.';
    $campaign->revision = TRUE;
    entity_save('crm_campaign', $campaign);
  }
  catch (Exception $e) {
    watchdog_exception('crm_campaign', $e);
    drupal_set_message('Unable to remove channels from campaign.', 'error');
    return FALSE;
  }
}

/**
 * Menage recipients: page callback.
 *
 * @param $campaign
 *   Campaign object.
 *
 * @return array
 *   Build array.
 */
function crm_campaign_ui_manage_recipients($campaign) {
  $build = array();

  $view = views_get_view('crm_campaign_channel');
  $view->override_url = current_path();

  $build['statistics'] = _crm_campaign_ui_statistics($campaign);

  $build['view'] = array(
    '#markup' => $view->preview('default', array($campaign->campaign_id)),
  );

  return $build;
}

/**
 * Implements hook_entity_info_alter().
 */
function crm_campaign_ui_entity_info_alter(&$entity_info) {

  // Expose the order UI for order fields.
  $entity_info['crm_campaign']['bundles']['crm_campaign']['admin'] = array(
    'path' => 'admin/crm/config/campaign',
    'real path' => 'admin/crm/config/campaign',
    'access arguments' => array('crm administer'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crm_campaign_ui_form_crm_campaign_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['manage'] = array(
    '#type' => 'submit',
    '#value' => t('Save & add recipients'),
    '#ief_submit_all' => TRUE,
  );
  $form['#submit'][] = 'crm_campaign_ui_manage_recipients_redirect_form_submit';
}

/**
 * Redirect form submit handler.
 */
function crm_campaign_ui_manage_recipients_redirect_form_submit(&$form, &$form_state) {
  $uri = entity_uri('crm_campaign', $form_state['crm_campaign']);
  if ($form_state['triggering_element']['#value'] == t('Save & add recipients')) {
    if (isset($_GET['destination'])) {
      unset($_GET['destination']);
    }
    $form_state['redirect'] = $uri['path'] . '/recipients';
  }
}

/**
 * Statistic renderable block.
 *
 * @param $campaign
 *   Campaign object.
 *
 * @return array
 *   Build array.
 */
function _crm_campaign_ui_statistics($campaign) {
  $build = array();

  $build['#attached']['css'] = array(
    drupal_get_path('module', 'crm_campaign_ui') . '/assets/crm_campaign_ui.statistics.css' => array(),
  );

  $all = $all_selected = 0;
  $wrapper = entity_metadata_wrapper('crm_campaign', $campaign);

  foreach (crm_channel_types() as $name => $type) {
    if (!_crm_message_template_channel_supported($name)) {
      continue;
    }

    // Query.
    $query = db_select('crm_channel', 'c');
    $query->leftJoin('field_data_crm_channel', 'cc', 'c.channel_id = cc.crm_channel_target_id AND cc.entity_type = :entity_type AND cc.entity_id = :entity_id', array(':entity_type' => 'crm_campaign', ':entity_id' => $campaign->campaign_id));
    $query->condition('c.type', $name);
    $query->addExpression('COUNT(c.channel_id)', 'max');
    $query->addExpression('COUNT(cc.entity_id)', 'value');
    $results = $query->execute()->fetchAssoc();


    // Check if template exists.
    $exists = FALSE;
    foreach ($wrapper->crm_message_template->getIterator() as $template_wrapper) {
      if ($template_wrapper->getBundle() === $name) {
        $exists = TRUE;
        break;
      }
    }

    // Container
    $build[$name] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'crm-campaign-ui__statistics__type',
          !$exists && $results['value'] ? 'non-existing' : NULL,
        ),
      ),
    );

    // Add knob.
    $build[$name]['knob'] = array(
      '#theme' => 'crm_ui_knob',
      '#label' => crm_channel_type_get_name($name),
      '#value' => $results['value'],
      '#min' => 0,
      '#max' => $results['max'],
      '#settings' => array(
        'fgColor' => $exists ? '#009900' : '#eeeeee',
      ),
    );
    if (!$exists && $results['value']) {
      $build[$name]['text'] = array(
        '#markup' => t('@number recipients would not get your campaign. Missing message template.', array('@number' => $results['value'])),
      );
    }

    // Summarize data.
    $all_selected += $results['value'];
    $all += $results['max'];
  }

  $build['all'] = array(
    '#theme' => 'crm_ui_knob',
    '#weight' => -99,
    '#label' => t('Total'),
    '#value' => $all_selected,
    '#min' => 0,
    '#max' => $all,
    '#settings' => array(
      'fgColor' => NULL,
      'width' => 150,
      'height' => 150,
    ),
  );


  return $build;
}
